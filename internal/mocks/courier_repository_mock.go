// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Haba1234/delivery/internal/core/ports (interfaces: ICourierRepository)
//
// Generated by this command:
//
//	mockgen -destination=./../../mocks/courier_repository_mock.go -package=mocks . ICourierRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	courier "github.com/Haba1234/delivery/internal/core/domain/model/courier"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockICourierRepository is a mock of ICourierRepository interface.
type MockICourierRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICourierRepositoryMockRecorder
	isgomock struct{}
}

// MockICourierRepositoryMockRecorder is the mock recorder for MockICourierRepository.
type MockICourierRepositoryMockRecorder struct {
	mock *MockICourierRepository
}

// NewMockICourierRepository creates a new mock instance.
func NewMockICourierRepository(ctrl *gomock.Controller) *MockICourierRepository {
	mock := &MockICourierRepository{ctrl: ctrl}
	mock.recorder = &MockICourierRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICourierRepository) EXPECT() *MockICourierRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockICourierRepository) Add(ctx context.Context, aggregate *courier.Courier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, aggregate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockICourierRepositoryMockRecorder) Add(ctx, aggregate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockICourierRepository)(nil).Add), ctx, aggregate)
}

// Get mocks base method.
func (m *MockICourierRepository) Get(ctx context.Context, id uuid.UUID) (*courier.Courier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*courier.Courier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockICourierRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockICourierRepository)(nil).Get), ctx, id)
}

// GetAllInFreeStatus mocks base method.
func (m *MockICourierRepository) GetAllInFreeStatus(ctx context.Context) ([]*courier.Courier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllInFreeStatus", ctx)
	ret0, _ := ret[0].([]*courier.Courier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllInFreeStatus indicates an expected call of GetAllInFreeStatus.
func (mr *MockICourierRepositoryMockRecorder) GetAllInFreeStatus(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllInFreeStatus", reflect.TypeOf((*MockICourierRepository)(nil).GetAllInFreeStatus), ctx)
}

// Update mocks base method.
func (m *MockICourierRepository) Update(ctx context.Context, aggregate *courier.Courier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, aggregate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockICourierRepositoryMockRecorder) Update(ctx, aggregate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockICourierRepository)(nil).Update), ctx, aggregate)
}
