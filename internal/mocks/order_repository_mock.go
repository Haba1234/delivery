// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Haba1234/delivery/internal/core/ports (interfaces: IOrderRepository)
//
// Generated by this command:
//
//	mockgen -destination=./../../mocks/order_repository_mock.go -package=mocks . IOrderRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	order "github.com/Haba1234/delivery/internal/core/domain/model/order"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIOrderRepository is a mock of IOrderRepository interface.
type MockIOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIOrderRepositoryMockRecorder
	isgomock struct{}
}

// MockIOrderRepositoryMockRecorder is the mock recorder for MockIOrderRepository.
type MockIOrderRepositoryMockRecorder struct {
	mock *MockIOrderRepository
}

// NewMockIOrderRepository creates a new mock instance.
func NewMockIOrderRepository(ctrl *gomock.Controller) *MockIOrderRepository {
	mock := &MockIOrderRepository{ctrl: ctrl}
	mock.recorder = &MockIOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrderRepository) EXPECT() *MockIOrderRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockIOrderRepository) Add(ctx context.Context, aggregate *order.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, aggregate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockIOrderRepositoryMockRecorder) Add(ctx, aggregate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIOrderRepository)(nil).Add), ctx, aggregate)
}

// Get mocks base method.
func (m *MockIOrderRepository) Get(ctx context.Context, ID uuid.UUID) (*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, ID)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIOrderRepositoryMockRecorder) Get(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIOrderRepository)(nil).Get), ctx, ID)
}

// GetAllInAssignedStatus mocks base method.
func (m *MockIOrderRepository) GetAllInAssignedStatus(ctx context.Context) ([]*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllInAssignedStatus", ctx)
	ret0, _ := ret[0].([]*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllInAssignedStatus indicates an expected call of GetAllInAssignedStatus.
func (mr *MockIOrderRepositoryMockRecorder) GetAllInAssignedStatus(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllInAssignedStatus", reflect.TypeOf((*MockIOrderRepository)(nil).GetAllInAssignedStatus), ctx)
}

// GetFirstInCreatedStatus mocks base method.
func (m *MockIOrderRepository) GetFirstInCreatedStatus(ctx context.Context) (*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstInCreatedStatus", ctx)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstInCreatedStatus indicates an expected call of GetFirstInCreatedStatus.
func (mr *MockIOrderRepositoryMockRecorder) GetFirstInCreatedStatus(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstInCreatedStatus", reflect.TypeOf((*MockIOrderRepository)(nil).GetFirstInCreatedStatus), ctx)
}

// Update mocks base method.
func (m *MockIOrderRepository) Update(ctx context.Context, aggregate *order.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, aggregate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIOrderRepositoryMockRecorder) Update(ctx, aggregate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIOrderRepository)(nil).Update), ctx, aggregate)
}
