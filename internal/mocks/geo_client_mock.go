// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Haba1234/delivery/internal/core/ports (interfaces: IGeoClient)
//
// Generated by this command:
//
//	mockgen -destination=./../../mocks/geo_client_mock.go -package=mocks . IGeoClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	kernel "github.com/Haba1234/delivery/internal/core/domain/model/kernel"
	gomock "go.uber.org/mock/gomock"
)

// MockIGeoClient is a mock of IGeoClient interface.
type MockIGeoClient struct {
	ctrl     *gomock.Controller
	recorder *MockIGeoClientMockRecorder
	isgomock struct{}
}

// MockIGeoClientMockRecorder is the mock recorder for MockIGeoClient.
type MockIGeoClientMockRecorder struct {
	mock *MockIGeoClient
}

// NewMockIGeoClient creates a new mock instance.
func NewMockIGeoClient(ctrl *gomock.Controller) *MockIGeoClient {
	mock := &MockIGeoClient{ctrl: ctrl}
	mock.recorder = &MockIGeoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGeoClient) EXPECT() *MockIGeoClientMockRecorder {
	return m.recorder
}

// GetGeolocation mocks base method.
func (m *MockIGeoClient) GetGeolocation(ctx context.Context, street string) (kernel.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeolocation", ctx, street)
	ret0, _ := ret[0].(kernel.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGeolocation indicates an expected call of GetGeolocation.
func (mr *MockIGeoClientMockRecorder) GetGeolocation(ctx, street any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeolocation", reflect.TypeOf((*MockIGeoClient)(nil).GetGeolocation), ctx, street)
}
